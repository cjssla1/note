

2020 하반기 네이버, 카카오, 쿠팡의 신입공채에 지원했으며 네이버, 쿠팡에 최종합격했습니다.

먼저 지원했을 때 제 스펙입니다.
학점 3.7/4.5 컴퓨터공학과
자격증 리눅스마스터 2급, 정보처리기사, 컴활 1급
인턴 1회
수상경력 1회 Naver AI RUSH 2020 이용자 비정상적 행동 탐지 1위, 스팸메일 분류 3위
어학 없음


서류적으로 제일 중요한건 실무능력을 보여줄 수 있는 거, 즉 인턴과 수상경력입니다.
학점과 자격증에 대해서는 면접에서 단 한마디도 나누지 않았습니다.
다만 요즘 뜨는 자격증은 AWS 자격증입니다.



핵심적으로 준비해야하는 것 
1. 코딩테스트 
2. 프로젝트 경험(+ git)
3. 면접



1. 코딩테스트

 저는 원래 c++로 코딩을 하다가, ML/DL 쪽 공부하면서 파이썬을 하다보니 결국은 파이썬으로 코테를 치렀습니다.
자기가 이미 c++, java를 어느 정도 하는 게 아니라면 파이썬으로 준비하시는 걸 추천드립니다.
파이썬의 가장 장점은 책 제목부터 코딩테스트가 들어가는 코테 저격용 서적이 있는데 그걸 이용하여 준비하시면 충분합니다.
저 같은 경우에는 "파이썬 알고리즘 인터뷰"라는 서적을 이용했습니다.


코딩테스트의 핵심 유형은 크게 2가지로 나누어집니다.
1. 알고리즘/자료구조 문제
2. 구현 문제

핵심적인 알고리즘/자료구조는 해시, 스택/큐, 힙, 정렬, 완전탐색, 탐욕법, 동적계획법, 깊이/너비 우선탐색, 이분탐색, 그래프로 이 10 위주로 준비하시면 됩니다.
알고리즘 문제는 위의 10개 + 약간의 응용으로만 이루어져 있습니다. 여기서 응용이란 알고리즘만 안다고 풀 수 있는게 아니고
문제에 맞춰서 조금씩 수정해야한다는 의미입니다.


구현 문제는 대체로 해당 회사가 사용하는 기술과 채용 분야와 관련되어 있습니다.
어디든 문자열을 다루기 때문에 문자열과 관련된 문제는 거의 항상 나옵니다.
주로 나오는 출제유형은 알고리즘 명세서를 문제에서 제공하고 그대로 구현하는 문제입니다.
ex) 문자열 s를 받는다.
 1. *와 띄어쓰기(공백)을 제외한 모든 특수문자를 제거한다.
 2. 문자 사이에 *이 있다면 *을 +로 바꾸고 앞 뒤의 문자를 제거한다.
 3. 다시 1-2를 반복한다.
 4. 더 이상 반복할 수 없을 때 만들어진 s'를 반환한다.
위 예시처럼 알고리즘 명세서를 제시하고 그걸 실제 코드로 구현할 수 있는 지를 봅니다.

게임쪽이라면 주로 2차원 배열과 관련된 로직이 나옵니다. 대표적인 예시는 테트리스입니다.
아래쪽 배열이 다 찼을 때 내용을 지우고 위에 있는 배열의 값들을 내려줘야 하는 로직이요.
웹 백엔드/프론트앤드 또는 네트워크나 트래픽과 관련된 분야라면 그래프도 자주 나옵니다.

코딩테스트 연습으로는 프로그래머스, 백준, 리트코드 등 여러 개가 있으며 저는 그 중에 프로그래머스에서 연습을 하였습니다.
이유는 네이버,카카오,쿠팡 신입공채 모두 프로그래머스 환경에서 봤거든요.

프로그래머스에서 lv 1부터~ lv 3 약 150문제 정도 푸니깐 코딩테스트에서 합격했습니다.
참고로 카카오는 커트라인보다 1문제 못 풀어서 탈락했습니다 ㅋㅋ 카카오 준비하실 분들은 200문제 정도 푸시면 될듯





2. 프로젝트 경험(+git)

인턴경험 > 공모전,대회

다만 인턴이 쉽지 않습니다. 그러므로 오픈 소스 프로젝트에 참여하거나, 하다못해 자기만의 프로젝트라도 만들어야 합니다.
자기만의 프로젝트밖에 없을 경우 중요한 것은 사용자 인터페이스까지 구현해서 실제로 동작하는 모습을 보여줄 수 있는게 좋습니다.
단순히 포트폴리오가 아니고 앱이라면 실제 구글/ios 앱스토어에 출시를 하셔야 하고, 웹이면 AWS에 올려서 살아있는 웹서버로
보여 주셔야 합니다.

웹 백엔드/프론트엔드는 둘 중 뭘 준비하시든지 풀스택으로 둘 다 해야합니다. 기업은 편식하는 인재를 원하지 않습니다.
무조건 풀스택으로 준비를 하신 뒤 단지 지원분야에서 선택할 때 둘 중 더 좋아하시는 것 골라야지 처음부터 나는 FE만 할거야
나는 BE만 할거야하고 준비하시면 안됩니다. 자기소개서나 면접에서 둘다 해봤는데 FE가 좀 더 적성에 맞는 거 같다식으로 가야합니다.
다만 백엔드라면 java + Spring이 더 요구되고, 프론트엔드라면 리액트, 앵귤러, vue가 더 요구됩니다.

앱같은 경우에도 ios/ 코틀린/ 자바의 기초 정도는 알고 있고 그 중 어느 하나는 좀 더 깊게 알고 있는 즉 T자형 지식을 갖추셔야 합니다.

그리고 자기가 하는 것들을 깃허브에 꼭 남기세요! 일관성이 부족해도 됩니다. 다만 꾸준히 커밋하십시요. 흔히 말하는 깃허브 잔디를 심어야합니다. 
또한 앱으로 지원했는데 앱만 있는게 아니고 웹 내용이 깃허브에 올라가 있다고 싫어하지 않습니다.
저 같은 경우엔 면접을 잘 못보고 있었는데 오히려 면접관님이 깃허브를 보고 여러가지 활동을 한 거 같은데 좀 더 어필을 해보라고 하셨습니다.






3. 면접

일반/인성 면접
신입면접에서 면접관들이 기대하는 것은 지원한 분야에 해박한 지식이 아닙니다. 그걸 원하면 그냥 경력직 뽑았어요.
다만 어느 정도 꼬리물기로 어디까지 아나 검증은 할겁니다. 준비하시는게 좋긴해요.
근데 제일 중요한 건 성장 가능성, 잠재력, 커뮤니케이션을 보여주는 것입니다. 이땐 수상경력이 확실하긴 하죠. 
없을 땐 자기가 제일 깊게 팠었던 경험으로 유도를 하셔야합니다. 
어떤 문제가 있었고 그것을 해결하기 위해 빠른 학습을 통해 해결했다로 귀결되셔야합니다.
또한 팀 프로젝트인 경우 커뮤니케이션을 어떻게 해결했는지도 질문이 자주 들어옵니다.

기술 면접
신입 면접에서 기술면접은 주로 자료구조, 운영체제, 언어, 알고리즘, 객체지향, 네트워크 등 컴퓨터공학의 기초을 알고 있나를 확인합니다.
이부분을 소홀히 하면 오히려 기본이 안된 사람이라고 느껴질 수 있기때문에 어느정도 외울 준비를 하셔야합니다.

코딩 인터뷰
면접관이 문제를 주고 앞에서 화이트보드에 손코딩을 하거나 화상의 개발환경에서 실제로 코딩합니다.
다만 이 문제는 시간내에 풀 수 있게 그렇게 어렵진 않은 문제입니다. 단지 코테랑은 유형이 조금 달라서
구현이 어렵진 않은데 생각이 좀 필요한 문제입니다. 위에 언급했던 "파이썬 알고리즘 인터뷰"가 정말 큰 도움이 됩니다.
아는 문제가 나왔다고 파바박 풀지마세요, 그럼 그냥 더 어려운 문제가 다시 나올뿐입니다.
이 인터뷰의 핵심은 면접관과의 커뮤니케이션입니다. 접근 방법이 잘 생각이 안난다면 면접관에게 힌트를 요구하세요.
코딩을 하다가 면접관이 이 부분은 왜 이렇게 하셨나요? 이런 방법이 더 좋지 않을까요?라는 질문이 오면 정말 성심성의껏
얘기해서 면접관을 설득하거나 내 비효율을 인정하고 고치셔야 합니다. 안 물어보면 오히려 저는 이런 생각으로 이렇게 짰습니다.
혹시 면접관님의 생각은 어떠신가요? 더 효율적인게 있을까요? 식으로 역으로 질문하셔야합니다.
고집과 독단이 제일 안 좋은 모습입니다.
만약 예시로 면접관이 "숫자대신 문자가 들어오는 건 예외처리가 이미 됐다고 치고 진행하죠"라고 하면 
절대로 문자열 들어왔을 때를 위한 예외처리를 계속해서 진행하시면 안 됩니다.
코딩 인터뷰에서 중요한것은 문제에 접근하는 방법과 면접관과의 커뮤니케이션입니다.


면접관련 팁은 유튜브를 주로 참조(면접왕 이형)하였으며 기술면접 준비는 오픈소스 깃허브 프로젝트인 
https://github.com/JaeYeopHan/Interview_Question_for_Beginner 를 주로 참조하였습니다.


